<?xml version="1.0" encoding="UTF-8"?>
<codehawk-binary-analyzer>
  <reference href="http://pubs.opengroup.org/onlinepubs/000095399/"/>
  <header date="2020-05-12 14:20:13"/>
  <libfun lib="so_functions" name="recvfrom">
    <documentation>
      <desc>receive a message from a socket</desc>
      <apidoc>
        <pt>
          <ll>ssize_t recvfrom(</ll>
          <ld>int socket</ld>
          <ld>void *restrict buffer</ld>
          <ld>size_t length</ld>
          <ld>int flags</ld>
          <ld>struct sockaddr *restrict address</ld>
          <ld>socklen_t address_len</ld>
          <ll>)</ll>
        </pt>
        <par name="socket">the socket file descriptor</par>
        <par name="buffer">
	  Points to the buffer where the message should be stored
	</par>
        <par name="length">
	  the length in bytes of the buffer pointed to by the buffer argument
	</par>
        <par name="flags">the type of message reception</par>
        <par name="address">
	  A null pointer, or points to a sockaddr structure in which
	  the sending address is to be stored. The length and format
	  of the address depend on the address family of the socket
	</par>
        <par name="address_len">
	  Either a null pointer, if address is a null pointer, or a
	  pointer to a socklen_t object which on input specifies the
	  length of the supplied sockaddr structure, and on output
	  specifies the length of the stored address.
	</par>
        <return>
          <rc cond="success">the length of the message in bytes</rc>
          <rc cond="failure">-1</rc>
        </return>
      </apidoc>
    </documentation>
    <api adj="0" cc="cdecl" name="recvfrom" lhsname="recvdmsglen">
      <par loc="stack" name="socket" nr="1">
        <type>int</type>
      </par>
      <par loc="stack" name="buffer" nr="2">
        <type><ptr>void</ptr></type>
      </par>
      <par loc="stack" name="length" nr="3">
        <type>size_t</type>
      </par>
      <par loc="stack" name="flags" nr="4">
        <type>int</type>
      </par>
      <par loc="stack" name="address" nr="5">
        <type><ptr>ch_sockaddr</ptr></type>
      </par>
      <par loc="stack" name="address_len" nr="6">
        <type><ptr>socklen_t</ptr></type>
      </par>
      <returntype>ssize_t</returntype>
    </api>
    <semantics>
      <io-actions/>
      <preconditions>
	<pre>
	  <math>
	    <apply>
	      <deref-write/>
	      <type>byte</type>
	      <ci>buffer</ci>
	      <ci>length</ci>
	    </apply>
	  </math>
	</pre>
	<pre>
	  <math>
	    <apply>
	      <deref-read-null/>
	      <type>ch_sockaddr</type>
	      <ci>address</ci>
	      <ci>address_len</ci>
	    </apply>
	  </math>
	</pre>
      </preconditions>
      <postconditions>
	<post>
	  <math>
	    <apply>
	      <geq/>
	      <return/>
	      <cn>0</cn>
	    </apply>
	  </math>
	</post>
	<error-post>
	  <math>
	    <apply>
	      <eq/>
	      <return/>
	      <cn>-1</cn>
	    </apply>
	  </math>
	</error-post>
      </postconditions>
      <sideeffects>
	<sideeffect>
	  <math>
	    <apply>
	      <block-write/>
	      <type>byte</type>
	      <ci>buffer</ci>
	      <ci>length</ci>
	    </apply>
	  </math>
	</sideeffect>
	<sideeffect>
	  <math>
	    <apply>
	      <block-write/>
	      <type>ch_sockaddr</type>
	      <ci>address</ci>
	      <ci>address_len</ci>
	    </apply>
	  </math>
	</sideeffect>
      </sideeffects>
    </semantics>
  </libfun>
  <copyright-notice>Copyright 2012-2020, Kestrel Technology LLC, Palo Alto, CA 94304</copyright-notice>
</codehawk-binary-analyzer>
