(* =============================================================================
   CodeHawk Unit Testing Framework 
   Author: Henny Sipma
   Adapted from: Kaputt (https://kaputt.x9c.fr/index.html)
   ------------------------------------------------------------------------------
   The MIT License (MIT)
 
   Copyright (c) 2005-2019 Kestrel Technology LLC
   Copyright (c) 2020-2021 Henny Sipma
   Copyright (c) 2022      Aarno Labs LLC

   Permission is hereby granted, free of charge, to any person obtaining a copy
   of this software and associated documentation files (the "Software"), to deal
   in the Software without restriction, including without limitation the rights
   to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   copies of the Software, and to permit persons to whom the Software is
   furnished to do so, subject to the following conditions:
 
   The above copyright notice and this permission notice shall be included in all
   copies or substantial portions of the Software.
  
   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
   SOFTWARE.
   ============================================================================= *)

(* tchlib *)
open TCHTestApi

(** Provides functions generating values. *)


(** Creates a new random source *)
val make_random: unit -> random_t


(** Creates a new random source, using the passed value as the seed *)
val make_random_seed: int -> random_t


(**Creates a new random source, using the passed value as the seed *)
val make_random_full: int array -> random_t


(** Dummy generator for [unit] value *)
val unit: unit generator_t


(** Generator of [bool] values *)
val bool: bool generator_t


(** [make_bool w1 w2] constructs a generator for [bool] values.
    [w1] and [w2] are the weights for respectively [true] and [false].
    Raises [Invalid_arg] if either [w1] or [w2] is negative. *)
val make_bool: int -> int -> bool generator_t


(** Generator for [int] values. *)
val int: int generator_t


(** Generator for positive [int] values. *)
val pos_int: int generator_t


(** Generator for negative [int] values. *)
val neg_int: int generator_t


(** [make_int m n] constructs a generator for [int] values.
    Generated values are between [m] (inclusive) and [n] (exclusive).
    Raises [Invalid_arg] if [m >= n]. *)
val make_int: int -> int -> int generator_t


(** Generator for [int] values selected from a given set. *)
val select_int: int list -> int generator_t


(** Generator for [char] values. *)
val char: char generator_t


(** Generator for [char] values representing (decimal) digits. *)
val digit: char generator_t


(** Generator for [char] values representing (binary) digits. *)
val digit_bin: char generator_t


(** Generator for [char] values representing (hexadecimal) digits. *)
val digit_hex: char generator_t


(** Generator for [char] values representing letters. *)
val letter: char generator_t


(** Generator for [char] values that selects from a given list of characters. *)
val select_letter: char list -> char generator_t

(** Generator for [char] values representing alphanumeric characters
    ({i i.e.} letters, decimal digits, as well as underscores). *)
val alphanum: char generator_t


(** [string i c] constructs a generator for [string] values.
    [i] is the generator used to determine the string length,
    while [c] is the generator used to generate characters. *)
val string: int generator_t -> char generator_t -> string generator_t


(** [strings sep i s] constructs a generator for [string] values.
    The generated strings are the concatenation of strings generated by [s],
    separated by [sep]. The number of strings is determined by [i]. *)
val strings: string -> int generator_t -> string generator_t -> string generator_t


(** [number n] constructs a generator for [string] values representing
    numbers. [n] is used to determine the number of (decimal) digits. *)
val number: int generator_t -> string generator_t

(** [number_bin n] constructs a generator for [string] values representing
    numbers. [n] is used to determine the number of (binary) digits. *)
val number_bin: int generator_t -> string generator_t


(** [number_hex n] constructs a generator for [string] values representing
    numbers. [n] is used to determine the number of (hexadecimal) digits. *)
val number_hex: int generator_t -> string generator_t


(** [word n] constructs a generator for [string] values representing words.
    [n] is used to determine the number of letters. *)
val word: int generator_t -> string generator_t


(** [words n p] constructs a generator for [string] values representing
    sequences of words. [n] is used to determine the number of words, while
    [p] is used to determine the number of letters for a word. Words are
    separated by single whitespaces. *)
val words: int generator_t -> int generator_t -> string generator_t


(** Generator for [float] values. *)
val float: float generator_t


(** [make_float f g] constructs a generator for [float] values. Generated
    values are between [f] (inclusive) and [g] (exclusive). *)
val make_float: float -> float -> float generator_t
